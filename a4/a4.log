Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
--------------
DROP TABLE IF EXISTS read_book
--------------

Query OK, 0 rows affected (0.006 sec)

--------------
DROP TABLE IF EXISTS book_author
--------------

Query OK, 0 rows affected (0.009 sec)

--------------
DROP TABLE IF EXISTS author
--------------

Query OK, 0 rows affected (0.005 sec)

--------------
DROP TABLE IF EXISTS book
--------------

Query OK, 0 rows affected (0.006 sec)

--------------
DROP TABLE IF EXISTS user
--------------

Query OK, 0 rows affected (0.005 sec)

--------------
CREATE TABLE IF NOT EXISTS user(
email VARCHAR(100),
date_added DATE,
nick_name VARCHAR(20),
profile VARCHAR(100),
CONSTRAINT user_pk PRIMARY KEY (email)
)
ENGINE=InnoDB
--------------

Query OK, 0 rows affected, 1 warning (0.006 sec)

--------------
show warnings
--------------

+---------+------+-----------------------------------------+
| Level   | Code | Message                                 |
+---------+------+-----------------------------------------+
| Warning | 1280 | Name 'user_pk' ignored for PRIMARY key. |
+---------+------+-----------------------------------------+
1 row in set (0.000 sec)

--------------
CREATE TABLE IF NOT EXISTS book(
book_id INT PRIMARY KEY AUTO_INCREMENT,
title VARCHAR(20) NOT NULL,
year INT(4) NOT NULL,
num_raters INT DEFAULT 0,
rating DECIMAL(3,1)
)
ENGINE=InnoDB
--------------

Query OK, 0 rows affected (0.006 sec)

--------------
CREATE TABLE IF NOT EXISTS author(
author_id INT PRIMARY KEY AUTO_INCREMENT,
last_name VARCHAR(20),
first_name VARCHAR(20) NOT NULL,
middle_name VARCHAR(20)
)
ENGINE=InnoDB
--------------

Query OK, 0 rows affected (0.006 sec)

--------------
CREATE TABLE IF NOT EXISTS book_author(
author_id INT,
book_id INT,
PRIMARY KEY(author_id, book_id),
FOREIGN KEY(author_id) REFERENCES author(author_id),
FOREIGN KEY(book_id) REFERENCES book(book_id)
)
ENGINE=InnoDB
--------------

Query OK, 0 rows affected (0.008 sec)

--------------
CREATE TABLE IF NOT EXISTS read_book(
book_id INT,
email VARCHAR(100),
date_read DATE NOT NULL,
rating INT NOT NULL,
PRIMARY KEY(book_id, email),
FOREIGN KEY(email) REFERENCES user(email),
FOREIGN KEY(book_id) REFERENCES book(book_id)
)
ENGINE=InnoDB
--------------

Query OK, 0 rows affected (0.008 sec)

--------------
DROP TRIGGER IF EXISTS date_added_trig
--------------

Query OK, 0 rows affected, 1 warning (0.000 sec)

--------------
CREATE TRIGGER date_added_trig
BEFORE INSERT ON user
FOR EACH ROW
BEGIN
    SET new.date_added = CURDATE();

END
--------------

Query OK, 0 rows affected (0.003 sec)

--------------
DROP TRIGGER IF EXISTS invalid_email_trig
--------------

Query OK, 0 rows affected, 1 warning (0.000 sec)

--------------
CREATE TRIGGER invalid_email_trig
BEFORE INSERT ON user
FOR EACH ROW
BEGIN
    IF NEW.email NOT LIKE '%_@_%._%' THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid Email';
    END IF;

END
--------------

Query OK, 0 rows affected (0.002 sec)

--------------
DROP TRIGGER IF EXISTS user_non_updateable_trig
--------------

Query OK, 0 rows affected, 1 warning (0.000 sec)

--------------
CREATE TRIGGER user_non_updateable_trig
BEFORE UPDATE ON user
FOR EACH ROW
BEGIN
    IF (NEW.date_added != OLD.date_added OR NEW.email != OLD.email) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot change that!';
    END IF;
    

END
--------------

Query OK, 0 rows affected (0.002 sec)

--------------
DROP TRIGGER IF EXISTS book_non_removeable_trig
--------------

Query OK, 0 rows affected, 1 warning (0.000 sec)

--------------
CREATE TRIGGER book_non_removeable_trig
BEFORE DELETE ON book
FOR EACH ROW
BEGIN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete books';
    

END
--------------

Query OK, 0 rows affected (0.002 sec)

--------------
DROP TRIGGER IF EXISTS modified_read_book_trig
--------------

Query OK, 0 rows affected, 1 warning (0.000 sec)

--------------
CREATE TRIGGER modified_read_book_trig
AFTER UPDATE ON read_book
FOR EACH ROW
BEGIN
    UPDATE book
    SET num_raters = (SELECT COUNT(*) FROM read_book),
        book.rating = (SELECT AVG(read_book.rating) FROM read_book)
    WHERE book.book_id = NEW.book_id;
    

END
--------------

Query OK, 0 rows affected (0.003 sec)

--------------
DROP TRIGGER IF EXISTS insert_read_book_trig
--------------

Query OK, 0 rows affected, 1 warning (0.000 sec)

--------------
CREATE TRIGGER insert_read_book_trig
AFTER INSERT ON read_book
FOR EACH ROW
BEGIN
    UPDATE book
    SET num_raters = (SELECT COUNT(*) FROM read_book),
        book.rating = (SELECT AVG(read_book.rating) FROM read_book)
    WHERE book.book_id = NEW.book_id;
    

END
--------------

Query OK, 0 rows affected (0.003 sec)

--------------
DROP TRIGGER IF EXISTS delete_read_book_trig
--------------

Query OK, 0 rows affected, 1 warning (0.000 sec)

--------------
CREATE TRIGGER delete_read_book_trig
AFTER DELETE ON read_book
FOR EACH ROW
BEGIN
    UPDATE book
    SET num_raters = (SELECT COUNT(*) FROM read_book),
        book.rating = (SELECT AVG(read_book.rating) FROM read_book);
    

END
--------------

Query OK, 0 rows affected (0.003 sec)

--------------
INSERT IGNORE INTO user (email, date_added, nick_name, profile)
VALUES
       ('notAnEmail', 12-22-1234, 'Fake Person', 'Super Fake')
--------------

ERROR 1644 (45000): Invalid Email
--------------
INSERT IGNORE INTO user (email)
VALUES
       ('almost@email')
--------------

ERROR 1644 (45000): Invalid Email
--------------
INSERT IGNORE INTO user (email, date_added)
VALUES
       ('something@email.com', 00-00-0000)
--------------

Query OK, 1 row affected (0.002 sec)

--------------
INSERT IGNORE INTO user (email, nick_name)
VALUES
       ('other@hotmail.ca', 'OG email service')
--------------

Query OK, 1 row affected (0.001 sec)

--------------
SELECT * FROM user
--------------

+---------------------+------------+------------------+---------+
| email               | date_added | nick_name        | profile |
+---------------------+------------+------------------+---------+
| other@hotmail.ca    | 2021-12-08 | OG email service | NULL    |
| something@email.com | 2021-12-08 | NULL             | NULL    |
+---------------------+------------+------------------+---------+
2 rows in set (0.002 sec)

--------------
INSERT IGNORE INTO author (first_name)
VALUES
       ('Author 1'),
       ('Author 2')
--------------

Query OK, 2 rows affected (0.001 sec)
Records: 2  Duplicates: 0  Warnings: 0

--------------
SELECT * FROM author
--------------

+-----------+-----------+------------+-------------+
| author_id | last_name | first_name | middle_name |
+-----------+-----------+------------+-------------+
|         1 | NULL      | Author 1   | NULL        |
|         2 | NULL      | Author 2   | NULL        |
+-----------+-----------+------------+-------------+
2 rows in set (0.002 sec)

--------------
INSERT IGNORE INTO book(title, year)
VALUES
       ('The Book', 1999)
--------------

Query OK, 1 row affected (0.001 sec)

--------------
SELECT * FROM book
--------------

+---------+----------+------+------------+--------+
| book_id | title    | year | num_raters | rating |
+---------+----------+------+------------+--------+
|       1 | The Book | 1999 |          0 |   NULL |
+---------+----------+------+------------+--------+
1 row in set (0.000 sec)

--------------
INSERT IGNORE INTO book_author(author_id, book_id)
VALUES
       (1,1),
       (2,1)
--------------

Query OK, 2 rows affected (0.001 sec)
Records: 2  Duplicates: 0  Warnings: 0

--------------
CREATE OR REPLACE VIEW author_view AS
       SELECT *
       FROM book_author
--------------

Query OK, 0 rows affected (0.002 sec)

--------------
SELECT * FROM author_view
--------------

+-----------+---------+
| author_id | book_id |
+-----------+---------+
|         1 |       1 |
|         2 |       1 |
+-----------+---------+
2 rows in set (0.001 sec)

--------------
INSERT IGNORE INTO read_book(book_id, email, date_read, rating)
VALUES
       (1,'something@email.com', CURDATE(), 10),
       (1, 'other@hotmail.ca', CURDATE(), 7)
--------------

Query OK, 2 rows affected (0.005 sec)
Records: 2  Duplicates: 0  Warnings: 0

--------------
SELECT * FROM read_book
--------------

+---------+---------------------+------------+--------+
| book_id | email               | date_read  | rating |
+---------+---------------------+------------+--------+
|       1 | other@hotmail.ca    | 2021-12-08 |      7 |
|       1 | something@email.com | 2021-12-08 |     10 |
+---------+---------------------+------------+--------+
2 rows in set (0.000 sec)

--------------
SELECT * FROM book
--------------

+---------+----------+------+------------+--------+
| book_id | title    | year | num_raters | rating |
+---------+----------+------+------------+--------+
|       1 | The Book | 1999 |          2 |    8.5 |
+---------+----------+------+------------+--------+
1 row in set (0.000 sec)

--------------
DELETE FROM read_book WHERE read_book.email = 'other@hotmail.ca'
--------------

Query OK, 1 row affected (0.001 sec)

--------------
SELECT * FROM read_book
--------------

+---------+---------------------+------------+--------+
| book_id | email               | date_read  | rating |
+---------+---------------------+------------+--------+
|       1 | something@email.com | 2021-12-08 |     10 |
+---------+---------------------+------------+--------+
1 row in set (0.000 sec)

--------------
SELECT * FROM book
--------------

+---------+----------+------+------------+--------+
| book_id | title    | year | num_raters | rating |
+---------+----------+------+------------+--------+
|       1 | The Book | 1999 |          1 |   10.0 |
+---------+----------+------+------------+--------+
1 row in set (0.000 sec)

